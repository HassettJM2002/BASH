Shell is an interface to talk to the computer
Goal is to reach multiple programs automatically

Bash is the most common shell

CTRL P down
CTRL N is up
CTRL A takes to start of a line
CTRL E gets to the end
CTRL U deletes the whole line
CTRL L clears the screen

history to see history of all comands
to do a specific command do !<line number>

To get help
use the man <command>
G to move to end of man page
g to move to the beginning of the man page

/pattern search forwards
?pattern search backward
&pattern displays only matthing lines
n or shift n 
q quit man page

bash views everything as a string

it is a case senstive language

Tootls to look stuff up
  Explainshell.com
  
curl - client url request, can grab a webpage
curl cht.sh/'command' pulls up examples of how to use the command
manpages.org for man pages

Order of Evaluation of a command
1) redirection '>' take stdout and redirect to a file, 
    '>' overwrites
    '>>' appends
    1> stdout is default
    2> stderror
    0> stdin
2)  Alias 
    You can create alias
    Alias goes before the actual command
    writing alias
        alias alias='command'
        unalas 'command'
3)
    () represents subshell, child shell, temps dont get opened in that shell
    $() runs a command in a subhsell
    (()) creates arithmeitc subshell, bash doesn't do math, evalutes ASCII, must tell bash to do math
    test if [] tests conditional
    [[]] can use expr features for expressions, more variable arguments, its better than the regulat []
    {} designed for grouping of characters, allows to run multiple options at the same time
4) Shell functions
    Can make functions
    assing a piece of code for reuse 
     'funcname'() { code }
    find out what a command is 
        type -a 'types / options assigned to the command' 
        unset 'function'
    functions and aliases are temporary, only exist in that shell by default
    
5) Built in commands
    are built into bash, do no have man pages, help "built in command"
   
6) Hash Tables
    Temporary cache
    commands are stored in hash table, references hash table
    
7) Path Variables
    Way to tell somethign where to look
    ~ is the users home directory
8) Error
    Last thing that happens if it doesnt know what to do
    
BRACE EXPANSION
    ls {BASH,SSH,ZIP}
    will ls each of the options in the brace expansions
    
    some commands support brace expansions
    
    touch file{1...10}.log will create files with name file1.log to file10.log
    
FILE SYSTEM & MANIPULATION
  
    Absolute, home, and relative File references
      home dir: ~/ or $HOME
      abs path: /etc/passwd
      rel path: ./ or ..
      
    FileSystem Cmds
      -touch: touch -t [[CC]YY]MMDDhhmm[.ss]
      -mkdir: mkdir -p
      -rm: rm -rf
      -rmdir: rmdir -p
      -ls: ls -lisa
      -cd: cd -
    Links
      
      Symbolic -> pointer or shortcut
      Hard Link -> creates new memory location to run that program
      
Processes and Memory

  Anything that runs in bash is a process
  
  ps - see running processes
  kill -9 1234
  killall killallfirefox
  
  less -> line by line, man pages default to less command, more user friendly
  more -> 
  
  cat will print everything to screen
  
  Finding Files
    find: find / 
        -d "for depth" 
        -maxdepth, also supports tests
        -mtime *n last 24, supports
        -name "patern" example (*.bin)
        -executable
        -exec {} ; 'command you wont to find the"
        -printf "format" %p filename %U user ID
        
        find -(i)name "name"
        find -inum for indoe location
        find / -type -d,f,p
        find / -type s -exec echo {} 2>/dev/null \;
        find / -mtime "2" days ago
        find / -cmin -30 
        find / -amin -30 accessed
        find / -mmin -60 modified
        find / -empty 'nothing in the files'
        find / ! -name 'every name you dont want to find'
        
    locate:
        find where something is installed
    whereis:
        whereis 'executable'
        where it is stored
    which:
        which bash
        shows more about the file
        
    GREP
      grep - print line smatching a pattern
      can grep a string out of a file
      dont need wildcards in grep
      
      grep "pattern" man.txt
      'dont expand variable'
      "does expand variable"
      grep -C "amount of lines above and below"
      grep -A "print precedidng three lines"
      grep -B "print following three lines:
      grep -n "line number"
      grep -o " -" filen ame
      grep -c " : count of pattern
      grep -c -v "intevert what you see"
      grep -E or egrep to look for regex patterns
      egrep "student|root|bob" /etc/passwd
      
CUT COMMAND
    remove something out of an output
    tail /etc/passwd | cut -d: f6 -d delim, field 6-7 --output-delimter="SUS"
    
