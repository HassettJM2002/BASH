Example 2)

awk -F: '($3 > 3) && ($NF == "/bin/bash") {print $1}' > $HOME/SED/names.txt

  -F: -> field delimiter is :
  '($3 > 3) && $NF == "/bin/bash"' : will only print 1st field if field 3 is greater than 3
  > $HOME/SED/names.txt : outputting it to a file, overwrites or creates a new one
  
Example 3)
  dmesg | egrep "CPU|BIOS" | egrep -iv "usable|reserved" cut -d] -f2-
    
      | egrep "CPU|BIOS" -> finds all lines with CPU or BIOS in it
      | egrep -iv "usable|reserved" -> removes all lines with usable or reserved
       cut -d] -f2- : will cut on the delimter ']' and will print all files 2 to the end

Example 4)
  
  a=$(openssl passwd -1 Password1234 -salt bad4u)
    openssl -> encryption method
    passwd -1 'Password' -> md5 hashed password
    -salt 'salt' -> the salt of the password
    
  awk -F -v "awk_var" '{OFS=":"} {$2=awk_var; print}' /etc/passwd
    
    awk -F: -> field separator ':'
    -v: variable import, declare it at the start 
    '{OFS=":"}' -> output field separator will be colon
    {$2=awk_var; print} -> the semi colon is equal to newline
    
Example 5)

  sed '/ /d'
  delete this pattern
  
  
  sed '/\bin\/false/d;/\/bin\/sh/d' passwd > $HOME/PASS/passwd.txt
  
  can do multiple delete pattersn in one line
  
  or 
  
  sed -e '/\bin\/false/d' -e '/\/bin\/sh/d' passwd
  
  to do multiple patterns in one


In bash context, parameter is an entity that stores a value
parameters can be variables, number, or special characeter

Bash Parameters, specifically variables

Variables ar eparameters set with a name identifier on the left or an equal sigth and value, no spaces in variables

    var_a="Hello World"
    another_var=42
    
    echo $var_a
      Hello World
      
    var_a= "Hello World" -> will error out
    
Special Parameters
  $# number of args passed
  $0 - represents script name
  $i -> the ith argument in parameter, $1 or $2
  $* -> Parameter gives all arguments passed to the shell script separated by the4 space
  $! -> gives PID of the last background running process
  $? Exist status of last command executed
  $_ last arguement 
  $$ PID of current shell
  $- current flags set in your shell
  
Functions:
allow to break code up into manageblae blocks
create a func, call it, use it, boom!

contain variables, loops, can return values

making func doesn;t call it, have to call it

Example of a func
"{}" brackets open the function body and close it
  myfunc() {
  echo Hello I am a function
  #This is a comment in my function
  }
  
 to reference a function call it by name "myfunc"
 
 function print_me { echo HELLO! }
 reference it print_me

#!/bin/bash
  function getuser()
  {
      echo "make a choice [1,2,3]:"
      read userchoice
      case $userchoice in
        (1) echo one ;;
        (2) echo two ;;
        (3) echo three ;;
        (*) echo other ;;
      esac
  }
  getuser
  
  case -> like an if statement, close it by write case backwards
